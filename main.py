import os, json, time, hmac, hashlib, asyncio, re, requests
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# ----------------- ENV -----------------
TG_TOKEN       = (os.getenv("TELEGRAM_TOKEN") or os.getenv("TG_TOKEN") or "").strip()
ALLOWED_ID     = int(os.getenv("ALLOWED_USER_ID", "0"))
TZ             = os.getenv("TZ", "Asia/Ho_Chi_Minh")
WATCHLIST      = os.getenv("WATCHLIST", "BTCUSDT,ETHUSDT,SOLUSDT,BNBUSDT,AVAXUSDT,INJUSDT,SUIUSDT,OPUSDT,NEARUSDT,LINKUSDT,MATICUSDT,SEIUSDT").replace(" ", "")
SCAN_INTERVAL  = int(os.getenv("SCAN_INTERVAL", "5"))  # –º–∏–Ω
TP1_PCT        = float(os.getenv("TP1_PCT", "3"))
TP2_PCT        = float(os.getenv("TP2_PCT", "6"))
SL_PCT         = float(os.getenv("SL_PCT", "2"))
PAPER_MODE     = os.getenv("PAPER_MODE", "true").lower() == "true"
SCHEDULE_TIMES = os.getenv("SCHEDULE_TIMES", "09:00,19:00,21:00,23:00")

if not TG_TOKEN or ":" not in TG_TOKEN:
    raise RuntimeError(f"Bad TELEGRAM_TOKEN: len={len(TG_TOKEN)}")

bot = Bot(token=TG_TOKEN, parse_mode="HTML")
dp  = Dispatcher(bot)
scheduler = AsyncIOScheduler(timezone=TZ)

# ----------------- PERSISTENCE -----------------
STATE_FILE = "/app/holdings.json"

def _now_ts(): return int(time.time()*1000)

def load_state():
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"holdings":{}}   # {"SOLUSDT":{"qty":10.0,"avg":55.0}}

def save_state(st):
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(st, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

state = load_state()

# ----------------- MARKET HELPERS -----------------
BINANCE = "https://api.binance.com"

def http_get(url, params=None, timeout=12):
    headers={"User-Agent":"Mozilla/5.0"}
    return requests.get(url, params=params, timeout=timeout, headers=headers)

def price(symbol):
    r = http_get(BINANCE + "/api/v3/ticker/price", {"symbol": symbol})
    r.raise_for_status()
    return float(r.json()["price"])

def klines(symbol, interval="1h", limit=60):
    r = http_get(BINANCE + "/api/v3/klines", {"symbol":symbol, "interval":interval, "limit":limit})
    r.raise_for_status()
    return r.json()

def sma(values, n):
    if len(values) < n: return None
    return sum(values[-n:]) / n

def basic_signal(symbol):
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–Ω–∞–ª–∏–∑: SMA20/50 + –∏–º–ø—É–ª—å—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ + –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (action, reason, tp1, tp2, sl)
    """
    try:
        ks = klines(symbol, "1h", 80)
        closes = [float(k[4]) for k in ks]
        c = closes[-1]
        s20 = sma(closes, 20)
        s50 = sma(closes, 50)
        body = (float(ks[-1][4]) - float(ks[-1][1])) / float(ks[-1][1]) * 100  # % —Ç–µ–ª–∞ —Å–≤–µ—á–∏

        action = "HOLD"
        reason = []
        if s20 and s50:
            if s20 > s50 and body > 0.4:
                action = "BUY"
                reason.append("SMA20>SMA50, –±—ã—á–∏–π –∏–º–ø—É–ª—å—Å")
            elif s20 < s50 and body < -0.4:
                action = "SELL"
                reason.append("SMA20<SMA50, –º–µ–¥–≤–µ–∂–∏–π –∏–º–ø—É–ª—å—Å")
            else:
                reason.append("–°–∏–≥–Ω–∞–ª —Å–ª–∞–±—ã–π ‚Äî –±–æ–∫–æ–≤–∏–∫/–±–µ–∑ –∏–º–ø—É–ª—å—Å–∞")

        tp1 = round(c * (1 + TP1_PCT/100), 6)
        tp2 = round(c * (1 + TP2_PCT/100), 6)
        sl  = round(c * (1 - SL_PCT/100), 6)
        if action == "SELL":
            # –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ TP/SL –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã –∫–∞–∫ —Ü–µ–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            pass
        return action, "; ".join(reason), c, tp1, tp2, sl
    except Exception as e:
        return "HOLD", f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ({e})", None, None, None, None

# ----------------- UI BUILDERS -----------------
def act_kb(symbol, action, tp1, tp2, sl):
    data_prefix = f"{symbol}|{action}|{tp1 or 0}|{tp2 or 0}|{sl or 0}"
    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"dec|SELL|{data_prefix}"),
        InlineKeyboardButton("üìà –î–æ–∫—É–ø–∏—Ç—å",       callback_data=f"dec|BUY|{data_prefix}"),
        InlineKeyboardButton("‚è≥ –î–µ—Ä–∂–∞—Ç—å",        callback_data=f"dec|HOLD|{data_prefix}")
    )
    return kb

def ensure_access(m: types.Message) -> bool:
    return ALLOWED_ID == 0 or m.from_user.id == ALLOWED_ID

# ----------------- COMMANDS -----------------
@dp.message_handler(commands=["start","help"])
async def cmd_start(m: types.Message):
    if not ensure_access(m): return await m.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    txt = (
        "ü§ñ –Ø –æ–Ω–ª–∞–π–Ω. PAPER_MODE=<b>{}</b>\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /news ‚Äî –Ω–æ–≤–æ—Å—Ç–∏ üì∞\n"
        "‚Ä¢ /market ‚Äî —Ü–µ–Ω—ã BTC/ETH üìä\n"
        "‚Ä¢ /status ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞ üîß\n"
        "‚Ä¢ /advice <SYMBOL> ‚Äî —Å–æ–≤–µ—Ç –ø–æ –º–æ–Ω–µ—Ç–µ (–ø—Ä–∏–º–µ—Ä: <code>/advice SOL</code>) üí°\n"
        "‚Ä¢ /hold add SOL 10 @ 55 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚úö\n"
        "‚Ä¢ /hold rm  SOL 5  ‚Äî —Å–ø–∏—Å–∞—Ç—å (–ø—Ä–æ–¥–∞–∂–∞) ‚ûñ\n"
        "‚Ä¢ /hold report ‚Äî –æ—Ç—á—ë—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é üìí\n"
    ).format("ON" if PAPER_MODE else "OFF")
    await m.answer(txt)

@dp.message_handler(commands=["status"])
async def cmd_status(m: types.Message):
    if not ensure_access(m): return
    txt = (
        "üõ†Ô∏è <b>–°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞</b>\n"
        f"Watchlist: {WATCHLIST}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {SCAN_INTERVAL} –º–∏–Ω\n"
        f"–¶–µ–ª–∏: TP1={TP1_PCT:.1f}%, TP2={TP2_PCT:.1f}%, SL={-SL_PCT:.1f}%"
    )
    await m.answer(txt)

# ---- NEWS (–æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ RSS) ----
FEEDS = [
    "https://www.coindesk.com/arc/outboundfeeds/rss/",
    "https://www.investing.com/rss/market_overview.rss"
]
def fetch_news(limit=6):
    items=[]
    for u in FEEDS:
        try:
            r=http_get(u, timeout=10)
            if r.status_code!=200: continue
            t=re.findall(r"<title>(.*?)</title>", r.text, re.I|re.S)
            for s in t[1:12]:
                s=re.sub("<.*?>","",s).strip()
                if s and s not in items: items.append(s)
                if len(items)>=limit: break
        except: pass
        if len(items)>=limit: break
    return items

@dp.message_handler(commands=["news"])
async def cmd_news(m: types.Message):
    if not ensure_access(m): return
    items = fetch_news(6)
    if not items: return await m.answer("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    await m.answer("üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏</b>\n" + "\n".join([f"‚Ä¢ {x}" for x in items]))

@dp.message_handler(commands=["market"])
async def cmd_market(m: types.Message):
    if not ensure_access(m): return
    try:
        btc = price("BTCUSDT")
        eth = price("ETHUSDT")
        await m.answer(f"üìä <b>–†—ã–Ω–æ–∫</b>\nBTC: <code>{btc:.2f}</code>\nETH: <code>{eth:.2f}</code>")
    except Exception as e:
        await m.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã: {e}")

# ---- HOLDING BOOK ----
HRE = re.compile(r"^/hold\s+(add|rm)\s+([A-Z]{2,10})\s+(\d+(?:\.\d+)?)\s*(?:@\s*(\d+(?:\.\d+)?))?$", re.I)

@dp.message_handler(commands=["hold"])
async def cmd_hold(m: types.Message):
    if not ensure_access(m): return
    t = m.get_args()
    if t.strip().lower() == "report":
        if not state["holdings"]:
            return await m.answer("üìí –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.")
        lines=[]
        total=0.0
        for s,info in state["holdings"].items():
            qty=float(info["qty"]); avg=float(info["avg"])
            try: px=price(s); pnl=(px-avg)/avg*100
            except: px=None; pnl=None
            line=f"‚Ä¢ {s}: {qty} @ {avg}"
            if px: line+=f" | now {px:.4f} ({pnl:+.2f}%)"
            lines.append(line); total += qty*avg
        return await m.answer("üìí <b>–û—Ç—á—ë—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é</b>\n"+"\n".join(lines))

    mt = HRE.match(m.text)
    if not mt:
        return await m.answer("‚ùó –§–æ—Ä–º–∞—Ç:\n/hold add SOL 10 @ 55\n/hold rm  SOL 5\n/hold report")
    act, sym, qty, avg = mt.groups()
    qty=float(qty); sym=sym.upper()
    key = sym if sym.endswith("USDT") else sym+"USDT"
    pos = state["holdings"].get(key, {"qty":0.0, "avg":0.0})

    if act.lower()=="add":
        if avg:  # —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ü–µ–Ω—ã
            new_qty = pos["qty"]+qty
            new_avg = (pos["avg"]*pos["qty"] + float(avg)*qty)/new_qty if new_qty>0 else 0.0
        else:
            px = price(key)
            new_qty = pos["qty"]+qty
            new_avg = (pos["avg"]*pos["qty"] + px*qty)/new_qty if new_qty>0 else 0.0
        state["holdings"][key]={"qty":round(new_qty,6),"avg":round(new_avg,6)}
        save_state(state)
        return await m.answer(f"‚úö –î–æ–±–∞–≤–ª–µ–Ω–æ: {sym} {qty}\n–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {state['holdings'][key]}")
    else:
        # rm
        new_qty = max(pos["qty"]-qty, 0.0)
        pos["qty"]=round(new_qty,6)
        state["holdings"][key]=pos
        if new_qty==0: state["holdings"].pop(key, None)
        save_state(state)
        return await m.answer(f"‚ûñ –°–ø–∏—Å–∞–Ω–æ: {sym} {qty}\n–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {state['holdings'].get(key,'–∑–∞–∫—Ä—ã—Ç–∞')}")

# ---- ADVICE ----
@dp.message_handler(commands=["advice"])
async def cmd_advice(m: types.Message):
    if not ensure_access(m): return
    arg = m.get_args().strip().upper()
    if not arg: return await m.answer("–£–∫–∞–∂–∏ —Å–∏–º–≤–æ–ª: –ø—Ä–∏–º–µ—Ä <code>/advice SOL</code>")
    symbol = arg if arg.endswith("USDT") else arg+"USDT"

    action, reason, last, tp1, tp2, sl = basic_signal(symbol)
    if not last:
        return await m.answer(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {symbol}.")
    emoji = {"BUY":"üü¢","SELL":"üî¥","HOLD":"üü°"}[action]
    txt = (
        f"{emoji} <b>–°–æ–≤–µ—Ç –ø–æ {symbol}</b>\n"
        f"–¶–µ–Ω–∞: <code>{last:.4f}</code>\n"
        f"TP1: <code>{tp1:.4f}</code> (+{TP1_PCT:.1f}%)\n"
        f"TP2: <code>{tp2:.4f}</code> (+{TP2_PCT:.1f}%)\n"
        f"SL:  <code>{sl:.4f}</code> (‚àí{SL_PCT:.1f}%)\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await m.answer(txt, reply_markup=act_kb(symbol, action, tp1, tp2, sl))

@dp.callback_query_handler(lambda c: c.data.startswith("dec|"))
async def decide(c: types.CallbackQuery):
    if ALLOWED_ID != 0 and c.from_user.id != ALLOWED_ID:
        return await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    _, user_choice, symbol, action, tp1, tp2, sl = c.data.split("|", 6)
    msg = {
        "BUY":  "üìà –î–æ–∫—É–ø–∏—Ç—å (—Ä—É—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è).",
        "SELL": "‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—å/–≤—Å—é –ø–æ–∑–∏—Ü–∏—é (—Ä—É—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è).",
        "HOLD": "‚è≥ –î–µ—Ä–∂–∞—Ç—å, –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π."
    }[user_choice]
    await c.message.edit_reply_markup()
    await c.message.answer(f"üìù –†–µ—à–µ–Ω–∏–µ –ø–æ {symbol}: <b>{user_choice}</b>\n{msg}\nPAPER_MODE={'ON' if PAPER_MODE else 'OFF'}")

# ----------------- SCHEDULER -----------------
def schedule_reports():
    # —á–µ—Ç—ã—Ä–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–∑–æ—Ä–∞ –≤ –¥–µ–Ω—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 09:00,19:00,21:00,23:00
    for t in [x.strip() for x in SCHEDULE_TIMES.split(",") if x.strip()]:
        h, m = t.split(":")
        scheduler.add_job(
            lambda: asyncio.create_task(send_daily_overview()),
            CronTrigger(hour=int(h), minute=int(m))
        )
    # —Å–∫–∞–Ω–µ—Ä-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –ø–æ watchlist
    scheduler.add_job(lambda: asyncio.create_task(scan_watchlist()), "interval", minutes=SCAN_INTERVAL)

async def send_daily_overview():
    if ALLOWED_ID == 0: return
    try:
        btc = price("BTCUSDT"); eth = price("ETHUSDT")
        items = fetch_news(4)
        txt = (
            f"üóìÔ∏è –û–±–∑–æ—Ä\nBTC: <code>{btc:.2f}</code> | ETH: <code>{eth:.2f}</code>\n\n"
            "üì∞ –¢–æ–ø‚Äë–∑–∞–≥–æ–ª–æ–≤–∫–∏:\n" + "\n".join([f"‚Ä¢ {x}" for x in items]) +
            "\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –ø–æ –º–æ–Ω–µ—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏ /advice SOL"
        )
        await bot.send_message(ALLOWED_ID, txt)
    except Exception as e:
        await bot.send_message(ALLOWED_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–∑–æ—Ä–∞: {e}")

async def scan_watchlist():
    if ALLOWED_ID == 0: return
    symbols = [s.strip().upper() for s in WATCHLIST.split(",") if s.strip()]
    lines=[]
    for s in symbols[:12]:  # –Ω–µ —Å–ø–∞–º–∏–º
        act, reason, last, tp1, tp2, sl = basic_signal(s)
        if not last: continue
        emoji = {"BUY":"üü¢","SELL":"üî¥","HOLD":"üü°"}[act]
        lines.append(f"{emoji} {s} {last:.4f} ‚Ä¢ {act}")
    if lines:
        txt = "üîé <b>–°–∫–∞–Ω–µ—Ä (–±—ã—Å—Ç—Ä—ã–π —Å—Ä–µ–∑)</b>\n" + "\n".join(lines) + "\n\n–ó–∞–ø—Ä–æ—Å–∏ –¥–µ—Ç–∞–ª—å–Ω–æ: /advice SOL"
        await bot.send_message(ALLOWED_ID, txt)

# ----------------- RUN -----------------
if __name__ == "__main__":
    schedule_reports()
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)

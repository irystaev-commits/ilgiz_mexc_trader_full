import os, re, json, time, math, asyncio, requests
from datetime import datetime
from typing import Dict, Any

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger


# ========= ENV =========
TG_TOKEN         = (os.getenv("TELEGRAM_TOKEN") or os.getenv("TG_TOKEN") or "").strip()
ALLOWED_ID       = int(os.getenv("ALLOWED_USER_ID", "0"))
TZ               = os.getenv("TZ", "Asia/Ho_Chi_Minh")
PAPER            = os.getenv("PAPER_MODE", "true").lower() == "true"
WATCHLIST        = [s.strip().upper() for s in os.getenv("WATCHLIST", "BTC,ETH,SOL,INJ,ENA,TIA,JUP,ZRO").split(",") if s.strip()]
SCAN_INTERVAL    = int(os.getenv("SCAN_INTERVAL", "60"))  # —Å–µ–∫, –∫–∞–∫ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å /status-—Å–∫–∞–Ω–µ—Ä
TP1_PCT          = float(os.getenv("TP1_PCT", "2"))       # —Ü–µ–ª—å 1 –≤ %
TP2_PCT          = float(os.getenv("TP2_PCT", "5"))       # —Ü–µ–ª—å 2 –≤ %
SL_PCT           = float(os.getenv("SL_PCT", "3"))        # —Å—Ç–æ–ø-–ª–æ—Å—Å –≤ %
MAX_USDT         = float(os.getenv("MAX_ORDER_USDT", "100"))
DIGEST_TIMES     = [t.strip() for t in os.getenv("DIGEST_TIMES", "09:00,19:00,21:00,23:00").split(",") if t.strip()]

if not TG_TOKEN or ":" not in TG_TOKEN:
    raise RuntimeError(f"Bad TELEGRAM_TOKEN: len={len(TG_TOKEN)}")

# ========= BOT/SCHED =========
bot = Bot(token=TG_TOKEN, parse_mode="HTML")
dp  = Dispatcher(bot)
scheduler = AsyncIOScheduler(timezone=TZ)

# ========= SIMPLE STORAGE (—ç–øhemeral) =========
# –î–µ—Ä–∂–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è/–∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–∞–π–ª–µ (–ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç —Ä–µ—Å—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞, –Ω–æ –Ω–µ –¥–µ–ø–ª–æ–π).
STORE_PATH = "store.json"

def load_store() -> Dict[str, Any]:
    try:
        with open(STORE_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"hold": {}, "notes": {}}

def save_store(data: Dict[str, Any]):
    try:
        with open(STORE_PATH, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

STORE = load_store()  # {"hold": {"SOL":{"qty":10,"avg":55.0}}, "notes":{}}


# ========= HELPERS =========
def ensure_access(m: types.Message) -> bool:
    return (ALLOWED_ID == 0) or (m.from_user.id == ALLOWED_ID)

def pct(a, b):
    try:
        return (a - b) / b * 100.0
    except Exception:
        return 0.0

def fmt_usd(x): return f"{x:,.2f}".replace(",", " ").replace(".00", "")
def now_hhmm():  return datetime.now().strftime("%H:%M")

# Price sources
def fetch_url(url, timeout=12):
    try:
        return requests.get(url, timeout=timeout, headers={"User-Agent":"Mozilla/5.0"})
    except Exception:
        return None

def binance_price(sym):  # sym like 'BTCUSDT'
    r = fetch_url(f"https://api.binance.com/api/v3/ticker/price?symbol={sym}", 8)
    if r and r.status_code == 200:
        try:
            return float(r.json().get("price", 0))
        except Exception:
            return None
    return None

def spot_symbol(sym: str) -> str:
    s = sym.upper()
    return s if s.endswith("USDT") else s + "USDT"

# ========= NEWS =========
NEWS_FEEDS = [
    "https://www.coindesk.com/arc/outboundfeeds/rss/",
    "https://www.investing.com/rss/market_overview.rss",
]

def fetch_news(limit=6):
    items = []
    import re
    for feed in NEWS_FEEDS:
        r = fetch_url(feed, 15)
        if not r or r.status_code != 200:
            continue
        titles = re.findall(r"<title>(.*?)</title>", r.text, re.I|re.S)
        for t in titles[1:15]:
            t = re.sub("<.*?>", "", t).strip()
            if t and t not in items:
                items.append(t)
            if len(items) >= limit:
                break
        if len(items) >= limit:
            break
    return items


# ========= COMMANDS =========
@dp.message_handler(commands=["start","help"])
async def start(m: types.Message):
    if not ensure_access(m):
        return await m.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    txt = (
        "ü§ñ –Ø –≥–æ—Ç–æ–≤.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /news ‚Äî –Ω–æ–≤–æ—Å—Ç–∏ üì∞\n"
        "‚Ä¢ /market ‚Äî —Ü–µ–Ω—ã BTC/ETH üìä\n"
        "‚Ä¢ /status ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞\n"
        "‚Ä¢ /hold add SOL 12.5 @ 56.2 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
        "‚Ä¢ /hold rm  SOL 5 ‚Äî —Å–ø–∏—Å–∞—Ç—å (–ø—Ä–æ–¥–∞–∂–∞)\n"
        "‚Ä¢ /hold report ‚Äî –æ—Ç—á—ë—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é\n"
        "‚Ä¢ /advice SOL ‚Äî —Å–æ–≤–µ—Ç: –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å/–¥–µ—Ä–∂–∞—Ç—å (—Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º)\n"
        f"\n–†–µ–∂–∏–º: {'PAPER' if PAPER else 'LIVE'}  ‚Ä¢ TZ={TZ}\n"
        f"–î–∞–π–¥–∂–µ—Å—Ç—ã: {', '.join(DIGEST_TIMES)}"
    )
    await m.answer(txt)

@dp.message_handler(commands=["news"])
async def cmd_news(m: types.Message):
    if not ensure_access(m): return
    items = fetch_news(6)
    if not items:
        return await m.answer("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    await m.answer("üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏</b>\n" + "\n".join([f"‚Ä¢ {t}" for t in items]))

@dp.message_handler(commands=["market"])
async def cmd_market(m: types.Message):
    if not ensure_access(m): return
    btc = binance_price("BTCUSDT")
    eth = binance_price("ETHUSDT")
    await m.answer(f"üìä <b>–†—ã–Ω–æ–∫</b>\nBTC: <code>{btc}</code>\nETH: <code>{eth}</code>")

@dp.message_handler(commands=["status"])
async def cmd_status(m: types.Message):
    if not ensure_access(m): return
    await m.answer(
        "üõ† <b>–°–∫–∞–Ω–µ—Ä</b>\n"
        f"–°–ª–µ–∂—É –∑–∞: {', '.join(WATCHLIST)}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {SCAN_INTERVAL}s  | TP1={TP1_PCT}%  TP2={TP2_PCT}%  SL={SL_PCT}%\n"
        f"–í—Ä–µ–º—è: {now_hhmm()}  ‚Ä¢ TZ={TZ}\n"
        f"–†–µ–∂–∏–º: {'PAPER' if PAPER else 'LIVE'}"
    )

# ---- HOLD SUBSYSTEM (—Ä—É—á–Ω–æ–π —É—á—ë—Ç)
HOLD_RE_ADD = re.compile(r"^/hold\s+add\s+([A-Z]{2,10})\s+([\d\.]+)\s*@\s*([\d\.]+)\s*$", re.I)
HOLD_RE_RM  = re.compile(r"^/hold\s+rm\s+([A-Z]{2,10})\s+([\d\.]+)\s*$", re.I)

@dp.message_handler(lambda m: m.text and HOLD_RE_ADD.match(m.text))
async def hold_add(m: types.Message):
    if not ensure_access(m): return
    sym, qty, price = HOLD_RE_ADD.match(m.text).groups()
    sym = sym.upper(); qty=float(qty); price=float(price)
    pos = STORE["hold"].get(sym, {"qty":0.0, "avg":0.0})
    new_qty = pos["qty"] + qty
    new_avg = (pos["avg"]*pos["qty"] + price*qty) / new_qty if new_qty>0 else 0.0
    STORE["hold"][sym] = {"qty": round(new_qty,6), "avg": round(new_avg,6)}
    save_store(STORE)
    await m.answer(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{sym}</b> {qty} @ {price}\n–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {STORE['hold'][sym]}")

@dp.message_handler(lambda m: m.text and HOLD_RE_RM.match(m.text))
async def hold_rm(m: types.Message):
    if not ensure_access(m): return
    sym, qty = HOLD_RE_RM.match(m.text).groups()
    sym = sym.upper(); qty=float(qty)
    pos = STORE["hold"].get(sym)
    if not pos:
        return await m.answer("‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    new_qty = max(0.0, pos["qty"] - qty)
    if new_qty == 0:
        STORE["hold"].pop(sym, None)
        msg = f"‚ûñ –ü—Ä–æ–¥–∞–∂–∞: {sym} {qty}. –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞."
    else:
        STORE["hold"][sym]["qty"] = round(new_qty,6)
        msg = f"‚ûñ –ü—Ä–æ–¥–∞–∂–∞: {sym} {qty}. –û—Å—Ç–∞—Ç–æ–∫: {STORE['hold'][sym]}"
    save_store(STORE)
    await m.answer(msg)

@dp.message_handler(commands=["hold"])
async def hold_report(m: types.Message):
    if not ensure_access(m): return
    parts = ["üíº <b>–û—Ç—á—ë—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é</b>"]
    total_val = 0.0
    for sym, pos in STORE["hold"].items():
        px = binance_price(spot_symbol(sym)) or 0.0
        val = pos["qty"] * px
        total_val += val
        p = pct(px, pos["avg"])
        parts.append(f"‚Ä¢ {sym}: qty={pos['qty']}  avg={pos['avg']}  px={px:.4f}  PnL={p:+.2f}%")
    parts.append(f"\n–ò—Ç–æ–≥–æ –æ—Ü–µ–Ω–∫–∞: ‚âà <b>{fmt_usd(total_val)}</b> USDT")
    await m.answer("\n".join(parts))

# ---- Advice
@dp.message_handler(commands=["advice"])
async def advice(m: types.Message):
    if not ensure_access(m): return
    args = m.get_args().strip().upper()
    if not args:
        return await m.answer("–§–æ—Ä–º–∞—Ç: <code>/advice SOL</code>")
    sym = args
    pos = STORE["hold"].get(sym)
    px = binance_price(spot_symbol(sym))
    if not px:
        return await m.answer("‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —Å–µ–π—á–∞—Å.")
    if not pos:
        # –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ ‚Üí —Å–æ–≤–µ—Ç –ø–æ –≤—Ö–æ–¥—É
        msg = (
            f"üß≠ <b>{sym}</b> —Å–µ–π—á–∞—Å {px:.4f}.\n"
            f"–°–æ–≤–µ—Ç: –∂–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–æ–±–æ—è/–æ–±—ä—ë–º–∞. –í—Ö–æ–¥ —á–∞—Å—Ç—è–º–∏ 25‚Äì30% –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ, SL {SL_PCT}%. "
            f"–¶–µ–ª–∏: +{TP1_PCT}% –∏ +{TP2_PCT}% –æ—Ç –≤—Ö–æ–¥–∞."
        )
        return await m.answer(msg)

    # –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è
    gain = pct(px, pos["avg"])
    explain = []
    decision = "–î–µ—Ä–∂–∞—Ç—å üü¢"
    if gain >= TP2_PCT:
        decision = "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å 50% ‚úÖ"
        explain.append(f"–ü—Ä–æ—Ñ–∏—Ç ‚â• TP2 ({TP2_PCT}%) ‚Äî —á–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫.")
    elif gain >= TP1_PCT:
        decision = "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å 25% ‚úÖ"
        explain.append(f"–ü—Ä–æ—Ñ–∏—Ç ‚â• TP1 ({TP1_PCT}%).")
    elif gain <= -SL_PCT:
        decision = "–°—Ç–æ–ø 100% ‚ùå"
        explain.append(f"–£—Ö–æ–¥ –Ω–∏–∂–µ SL ({SL_PCT}%).")

    if not explain:
        explain.append("–¢—Ä–µ–Ω–¥ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/—É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π, –ø–æ–≤–æ–¥–æ–≤ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –Ω–µ—Ç.")

    await m.answer(
        f"üß≠ <b>{sym}</b>\n"
        f"avg={pos['avg']} ‚Üí px={px:.4f}  PnL={gain:+.2f}%\n"
        f"–†–µ—à–µ–Ω–∏–µ: <b>{decision}</b>\n"
        "–ü—Ä–∏—á–∏–Ω–∞: " + " ".join(explain)
    )


# ========= SCHEDULER =========
async def send_digest():
    if ALLOWED_ID == 0:
        return
    btc = binance_price("BTCUSDT")
    eth = binance_price("ETHUSDT")
    news = fetch_news(3)
    msg = [
        f"üóû <b>–î–∞–π–¥–∂–µ—Å—Ç {now_hhmm()}</b>",
        f"‚Ä¢ BTC: <code>{btc}</code>  ‚Ä¢ ETH: <code>{eth}</code>",
        "‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏:",
    ] + [f"  ‚Äì {t}" for t in news]
    msg.append("\n–°–æ–≤–µ—Ç: /advice SOL (–ø—Ä–∏–º–µ—Ä) ‚Ä¢ –û—Ç—á—ë—Ç: /hold")
    try:
        await bot.send_message(ALLOWED_ID, "\n".join(msg))
    except Exception:
        pass

def schedule_jobs():
    # –î–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ ENV
    for t in DIGEST_TIMES:
        try:
            hh, mm = t.split(":")
            scheduler.add_job(
                lambda: asyncio.create_task(send_digest()),
                CronTrigger(hour=int(hh), minute=int(mm))
            )
        except Exception:
            continue
    # –õ—ë–≥–∫–∏–π ¬´—Å–∫–∞–Ω–µ—Ä¬ª ‚Äì –ø—Ä–æ—Å—Ç–æ –ø–∏–Ω–≥ —Ä–∞–∑ –≤ SCAN_INTERVAL (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –ª–æ–≥–∏–∫–æ–π)
    scheduler.add_job(
        lambda: None,  # –º–µ—Å—Ç–æ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
        "interval", seconds=max(30, SCAN_INTERVAL)
    )


# ========= START =========
if __name__ == "__main__":
    schedule_jobs()
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)

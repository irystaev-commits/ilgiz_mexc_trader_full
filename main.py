import os, re, time, hmac, hashlib, json, asyncio, requests
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# ========= ENV =========
TG_TOKEN = (os.getenv("TELEGRAM_TOKEN") or os.getenv("TG_TOKEN") or "").strip()
ALLOWED_ID = int(os.getenv("ALLOWED_USER_ID", "0"))
TZ = os.getenv("TZ", "Asia/Ho_Chi_Minh")
PAPER = os.getenv("PAPER_MODE", "true").lower() == "true"

# —Å–∏–≥–Ω–∞–ª-—Å–∫–∞–Ω–µ—Ä (–¥–µ—Ñ–æ–ª—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è /set)
WATCHLIST = [s.strip().upper() for s in os.getenv(
    "WATCHLIST",
    "BTCUSDT,ETHUSDT,SOLUSDT,BNBUSDT,AVAXUSDT,INJUSDT,SUIUSDT,OPUSDT,NEARUSDT,LINKUSDT,MATICUSDT,SEIUSDT"
).split(",") if s.strip()]

SCAN_INTERVAL = int(os.getenv("SCAN_INTERVAL", "5"))  # –º–∏–Ω
TP1_PCT = float(os.getenv("TP1_PCT", "3.0"))
TP2_PCT = float(os.getenv("TP2_PCT", "6.0"))
SL_PCT  = float(os.getenv("SL_PCT", "-2.0"))

# —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ‚Äë–¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
CRON_TIMES = [t.strip() for t in os.getenv("CRON_TIMES", "09:00,19:00,21:00,23:00").split(",") if t.strip()]

# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) MEXC ‚Äî –æ—Å—Ç–∞–≤–∏–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
MEXC_API_KEY = os.getenv("MEXC_API_KEY", "").strip()
MEXC_SECRET  = os.getenv("MEXC_SECRET_KEY", "").strip()
BASE_MEXC = "https://api.mexc.com"

# ====== guards ======
if not TG_TOKEN or ":" not in TG_TOKEN:
    raise RuntimeError(f"Bad TELEGRAM_TOKEN: len={len(TG_TOKEN)}")

bot = Bot(token=TG_TOKEN, parse_mode="HTML")
dp  = Dispatcher(bot)
scheduler = AsyncIOScheduler(timezone=TZ)

# ====== utils ======
def ts() -> int: return int(time.time() * 1000)

def _fetch(url, timeout=15):
    try:
        return requests.get(url, timeout=timeout, headers={"User-Agent":"Mozilla/5.0"})
    except Exception:
        return None

def binance_price(sym: str):
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={sym}"
    r = _fetch(url, 8)
    if not r or r.status_code != 200:
        return None
    try:
        return float(r.json().get("price", 0))
    except Exception:
        return None

def fmt_pct(x: float) -> str:
    s = f"{x:+.1f}%"
    return f"<b>{s}</b>"

def ensure(m: types.Message) -> bool:
    return (ALLOWED_ID == 0) or (m.from_user.id == ALLOWED_ID)

# ====== –ø—Ä–æ—Å—Ç—ã–µ –Ω–æ–≤–æ—Å—Ç–∏/—Ä—ã–Ω–æ–∫ ======
NEWS_FEEDS = [
    "https://www.coindesk.com/arc/outboundfeeds/rss/",
    "https://www.investing.com/rss/market_overview.rss"
]

def fetch_news(limit=6):
    items = []
    for feed in NEWS_FEEDS:
        r = _fetch(feed, 15)
        if not r or r.status_code != 200: 
            continue
        titles = re.findall(r"<title>(.*?)</title>", r.text, re.I|re.S)
        for t in titles[1:12]:
            t = re.sub("<.*?>", "", t).strip()
            if t and t not in items:
                items.append(t)
            if len(items) >= limit: break
        if len(items) >= limit: break
    return items

# ====== ¬´–±—É–º–∞–∂–Ω—ã–π¬ª –ø–æ—Ä—Ç—Ñ–µ–ª—å (–ª–æ–∫–∞–ª—å–Ω–æ –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞) ======
PORTF = {}  # {'SOLUSDT': {'qty': 10.0, 'avg': 55.0}}

def hold_add(symbol: str, qty: float, price: float):
    s = symbol.upper()
    if s not in PORTF:
        PORTF[s] = {"qty": 0.0, "avg": price}
    pos = PORTF[s]
    new_qty = pos["qty"] + qty
    if new_qty <= 0:
        PORTF.pop(s, None)
        return {"removed": True}
    pos["avg"] = (pos["avg"] * pos["qty"] + price * qty) / new_qty
    pos["qty"] = new_qty
    return {"qty": pos["qty"], "avg": pos["avg"]}

def hold_rm(symbol: str, qty: float, price: float):
    s = symbol.upper()
    if s not in PORTF:
        return {"error": "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏"}
    pos = PORTF[s]
    sell_qty = min(qty, pos["qty"])
    pos["qty"] -= sell_qty
    pnl = (price - pos["avg"]) * sell_qty
    closed = False
    if pos["qty"] <= 0:
        PORTF.pop(s, None)
        closed = True
    return {"pnl": pnl, "left": pos["qty"] if not closed else 0.0, "closed": closed}

def portf_report():
    if not PORTF: 
        return "–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç."
    lines = []
    total_usdt = 0.0
    for s, p in PORTF.items():
        px = binance_price(s) or 0.0
        chg = 0.0 if p["avg"] == 0 else (px/p["avg"] - 1.0) * 100
        val = px * p["qty"]
        total_usdt += val
        lines.append(f"‚Ä¢ {s}: {p['qty']:.4f} @ {p['avg']:.4f} ‚Üí <code>{px:.4f}</code> ({fmt_pct(chg)}) ‚âà <b>{val:.2f} USDT</b>")
    lines.append(f"\n–ò—Ç–æ–≥–æ ‚âà <b>{total_usdt:.2f} USDT</b>")
    return "\n".join(lines)

# ====== —Å–∫–∞–Ω–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ ======
def scan_market():
    out = []
    for s in WATCHLIST:
        px = binance_price(s)
        if not px:
            continue
        # –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –±–µ—Ä—ë–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ 1-—á–∞—Å–æ–≤–æ–π —Å–≤–µ—á–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ 24h price)
        # —Ç—É—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑—å–º—ë–º –µ—â—ë –æ–¥–∏–Ω –±—ã—Å—Ç—Ä—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ ‚Äî 24h change –Ω–∞ binance
        r = _fetch(f"https://api.binance.com/api/v3/ticker/24hr?symbol={s}", 8)
        chg = 0.0
        if r and r.status_code == 200:
            try: chg = float(r.json().get("priceChangePercent", 0.0))
            except: chg = 0.0

        # —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        advice = "ü§ù –î–µ—Ä–∂–∞—Ç—å"
        reason = "–¢—Ä–µ–Ω–¥ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
        if chg >= TP2_PCT:
            advice = "‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—å"
            reason = f"–†–æ—Å—Ç –∑–∞ 24—á {chg:.1f}% ‚â• TP2={TP2_PCT:.1f}%"
        elif chg >= TP1_PCT:
            advice = "üü¢ –ú–æ–∂–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å 30%"
            reason = f"–†–æ—Å—Ç –∑–∞ 24—á {chg:.1f}% ‚â• TP1={TP1_PCT:.1f}%"
        elif chg <= SL_PCT:
            advice = "üõë –°–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"
            reason = f"–ü–∞–¥–µ–Ω–∏–µ {chg:.1f}% ‚â§ SL={SL_PCT:.1f}%"

        out.append({
            "symbol": s, "price": px, "chg": chg,
            "advice": advice, "reason": reason
        })
    return out

def make_digest():
    rows = scan_market()
    if not rows:
        return "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
    lines = ["üß≠ <b>–°–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–∞</b> (Binance 24h)"]
    for r in rows:
        lines.append(
            f"‚Ä¢ <b>{r['symbol']}</b> <code>{r['price']:.4f}</code> "
            f"Œî24h={fmt_pct(r['chg'])} ‚Üí {r['advice']} ‚Äî {r['reason']}"
        )
    lines.append(f"\n–¶–µ–ª–∏: TP1={TP1_PCT:.1f}%, TP2={TP2_PCT:.1f}%, SL={SL_PCT:.1f}%")
    lines.append(f"Watchlist: {', '.join(WATCHLIST)}")
    lines.append(f"PAPER_MODE={'ON' if PAPER else 'OFF'}")
    return "\n".join(lines)

# ====== –ö–æ–º–∞–Ω–¥—ã ======
@dp.message_handler(commands=["start","help"])
async def cmd_start(m: types.Message):
    if not ensure(m): return
    txt = (
        "ü§ñ –Ø –≥–æ—Ç–æ–≤.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /news ‚Äî –Ω–æ–≤–æ—Å—Ç–∏ üóûÔ∏è\n"
        "‚Ä¢ /market ‚Äî —Ü–µ–Ω—ã BTC/ETH üìä\n"
        "‚Ä¢ /status ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞\n"
        "‚Ä¢ /advice <SYMBOL> ‚Äî —Å–æ–≤–µ—Ç –ø–æ –º–æ–Ω–µ—Ç–µ (–Ω–∞–ø—Ä. /advice SOL)\n"
        "‚Ä¢ /hold add SOL 10 @ 55 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
        "‚Ä¢ /hold rm SOL 5 ‚Äî —Å–ø–∏—Å–∞—Ç—å (–ø—Ä–æ–¥–∞–∂–∞)\n"
        "‚Ä¢ /hold report ‚Äî –æ—Ç—á—ë—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é\n"
        "‚Ä¢ /set tp1=5 tp2=12 sl=-3 iv=5 wl=BTCUSDT,ETHUSDT,SOLUSDT ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        f"PAPER_MODE={'ON' if PAPER else 'OFF'}"
    )
    await m.answer(txt)

@dp.message_handler(commands=["news"])
async def cmd_news(m: types.Message):
    if not ensure(m): return
    items = fetch_news(6)
    if not items:
        return await m.answer("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    await m.answer("üóûÔ∏è <b>–ù–æ–≤–æ—Å—Ç–∏</b>\n" + "\n".join([f"‚Ä¢ {t}" for t in items]))

@dp.message_handler(commands=["market"])
async def cmd_market(m: types.Message):
    if not ensure(m): return
    btc = binance_price("BTCUSDT"); eth = binance_price("ETHUSDT")
    await m.answer(f"üìä <b>–†—ã–Ω–æ–∫</b>\nBTC: <code>{btc}</code>\nETH: <code>{eth}</code>")

@dp.message_handler(commands=["status"])
async def cmd_status(m: types.Message):
    if not ensure(m): return
    txt = (f"üõ†Ô∏è <b>–°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞</b>\n"
           f"Watchlist: {', '.join(WATCHLIST)}\n"
           f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {SCAN_INTERVAL} –º–∏–Ω\n"
           f"–¶–µ–ª–∏: TP1={TP1_PCT:.1f}%, TP2={TP2_PCT:.1f}%, SL={SL_PCT:.1f}%")
    await m.answer(txt)

@dp.message_handler(commands=["advice"])
async def cmd_advice(m: types.Message):
    if not ensure(m): return
    parts = m.text.split()
    if len(parts) < 2:
        return await m.answer("–ü—Ä–∏–º–µ—Ä: <code>/advice SOL</code>")
    sym = parts[1].upper()
    if not sym.endswith("USDT"): sym += "USDT"
    px = binance_price(sym)
    if not px: return await m.answer("–¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    r = scan_market()
    found = next((x for x in r if x["symbol"]==sym), None)
    if not found:
        found = {"chg": 0, "advice": "ü§ù –î–µ—Ä–∂–∞—Ç—å", "reason": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ 24h"}
    await m.answer(
        f"üß† <b>–°–æ–≤–µ—Ç</b> –ø–æ {sym}\n"
        f"–¶–µ–Ω–∞: <code>{px:.4f}</code>\n"
        f"Œî24h={fmt_pct(found['chg'])}\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {found['advice']}\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {found['reason']}\n"
        f"–¶–µ–ª–∏: TP1={TP1_PCT:.1f}% / TP2={TP2_PCT:.1f}% / SL={SL_PCT:.1f}%"
    )

# /hold –±–ª–æ–∫
H_ADD_RE = re.compile(r"^/hold\s+add\s+([A-Z]{2,10})\s+(\d+(?:\.\d+)?)\s*@\s*(\d+(?:\.\d+)?)$", re.I)
H_RM_RE  = re.compile(r"^/hold\s+rm\s+([A-Z]{2,10})\s+(\d+(?:\.\d+)?)$", re.I)

@dp.message_handler(lambda m: m.text and m.text.lower().startswith("/hold"))
async def cmd_hold(m: types.Message):
    if not ensure(m): return
    t = m.text.strip()
    if t.endswith("report"):
        return await m.answer("üìí <b>–ü–æ—Ä—Ç—Ñ–µ–ª—å</b>\n" + portf_report())

    mt = H_ADD_RE.match(t)
    if mt:
        sym, qty, price = mt.groups()
        sym = sym.upper()
        if not sym.endswith("USDT"): sym += "USDT"
        res = hold_add(sym, float(qty), float(price))
        if "removed" in res:
            return await m.answer(f"–ü–æ–∑–∏—Ü–∏—è {sym} –æ–±–Ω—É–ª–µ–Ω–∞.")
        return await m.answer(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {sym} {float(qty):.4f} @ {float(price):.4f}\n–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {res}")

    mt = H_RM_RE.match(t)
    if mt:
        sym, qty = mt.groups()
        sym = sym.upper()
        if not sym.endswith("USDT"): sym += "USDT"
        px = binance_price(sym) or 0.0
        res = hold_rm(sym, float(qty), px)
        if "error" in res:
            return await m.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏.")
        note = "–∑–∞–∫—Ä—ã—Ç–∞" if res["closed"] else f"–æ—Å—Ç–∞–ª–æ—Å—å {res['left']:.4f}"
        return await m.answer(f"‚ûñ –ü—Ä–æ–¥–∞–Ω–æ: {sym} {float(qty):.4f} @ {px:.4f}\nP/L ‚âà <b>{res['pnl']:.2f} USDT</b>, {note}")

    await m.answer("–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ /hold add SOL 10 @ 55\n‚Ä¢ /hold rm SOL 3\n‚Ä¢ /hold report")

# /set ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –ª–µ—Ç—É
@dp.message_handler(commands=["set"])
async def cmd_set(m: types.Message):
    if not ensure(m): return
    global TP1_PCT, TP2_PCT, SL_PCT, SCAN_INTERVAL, WATCHLIST
    args = m.text.split()[1:]
    if not args:
        return await m.answer("–ü—Ä–∏–º–µ—Ä: /set tp1=5 tp2=12 sl=-3 iv=5 wl=BTCUSDT,ETHUSDT,SOLUSDT")
    changed = []
    for a in args:
        if "=" not in a: continue
        k, v = a.split("=", 1)
        k = k.lower()
        if k == "tp1":
            TP1_PCT = float(v); changed.append(f"TP1={TP1_PCT}%")
        elif k == "tp2":
            TP2_PCT = float(v); changed.append(f"TP2={TP2_PCT}%")
        elif k == "sl":
            SL_PCT = float(v); changed.append(f"SL={SL_PCT}%")
        elif k == "iv":
            SCAN_INTERVAL = max(1, int(v)); changed.append(f"–∏–Ω—Ç–µ—Ä–≤–∞–ª={SCAN_INTERVAL}–º")
        elif k == "wl":
            WATCHLIST = [s.strip().upper() for s in v.split(",") if s.strip()]
            changed.append(f"watchlist={len(WATCHLIST)} –ø–∞—Ä")
    await m.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: " + ", ".join(changed))

# ========= SCHEDULES =========
def schedule_digest_jobs():
    for t in CRON_TIMES:
        try:
            hh, mm = map(int, t.split(":"))
            scheduler.add_job(
                lambda: asyncio.create_task(bot.send_message(ALLOWED_ID or 0, make_digest())),
                CronTrigger(hour=hh, minute=mm)
            )
        except Exception:
            pass

def schedule_scanner_ping():
    # —Ñ–æ–Ω–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∂–¥—ã–µ SCAN_INTERVAL –º–∏–Ω—É—Ç (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫—É ALLOWED_ID)
    async def job():
        if not ALLOWED_ID:
            return
        rows = scan_market()
        if not rows: 
            return
        top = []
        for r in rows[:6]:
            top.append(f"{r['symbol']} {fmt_pct(r['chg'])} ‚Üí {r['advice']}")
        await bot.send_message(ALLOWED_ID, "‚è±Ô∏è <b>–ú–∏–Ω–∏‚Äë—Å–∫–∞–Ω</b>\n" + "\n".join(top))
    scheduler.add_job(lambda: asyncio.create_task(job()), f"interval", minutes=SCAN_INTERVAL)

# ========= run =========
if __name__ == "__main__":
    schedule_digest_jobs()
    schedule_scanner_ping()
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)

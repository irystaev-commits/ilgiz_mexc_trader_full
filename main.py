import os, re, time, json, asyncio, requests
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# ========= ENV (–∏–∑ Railway Variables) =========
TG_TOKEN   = (os.getenv("TELEGRAM_TOKEN") or os.getenv("TG_TOKEN") or "").strip()
ALLOWED_ID = int(os.getenv("ALLOWED_USER_ID", "0"))
PAPER_MODE = os.getenv("PAPER_MODE", "true").lower() == "true"

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ –≤—Ä–µ–º—è –∞–≤—Ç–æ–¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ (—Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–≤–æ–µ–º—É TZ)
TZ          = os.getenv("TZ", "Asia/Ho_Chi_Minh")
NEWS_TIMES  = [t.strip() for t in os.getenv("NEWS_TIMES", "09:00,19:00,21:00,23:00").split(",") if t.strip()]

# –°–∫–∞–Ω–µ—Ä (watchlist –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
WATCHLIST     = [s.strip().upper() for s in os.getenv(
    "WATCHLIST",
    "BTCUSDT,ETHUSDT,SOLUSDT,BNBUSDT,AVAXUSDT,INJUSDT,OPUSDT,NEARUSDT,LINKUSDT,MATICUSDT,SEIUSDT"
).split(",") if s.strip()]
SCAN_INTERVAL = int(os.getenv("SCAN_INTERVAL", "300"))  # 300—Å–µ–∫ = 5–º–∏–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –¶–µ–ª–∏/—Å—Ç–æ–ø—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–¥–ª—è —Å–æ–≤–µ—Ç–æ–≤ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤)
TP1_PCT = float(os.getenv("TP1_PCT", "3.0"))   # +3%
TP2_PCT = float(os.getenv("TP2_PCT", "6.0"))   # +6%
SL_PCT  = float(os.getenv("SL_PCT",  "2.0"))   # -2%

# –ü—Ä–∏–º–µ–Ω–∏–º TZ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É (–Ω–∞ Linux)
try:
    os.environ["TZ"] = TZ
    time.tzset()
except Exception:
    pass

# ========= Checks =========
if not TG_TOKEN or ":" not in TG_TOKEN:
    raise RuntimeError("Bad TELEGRAM_TOKEN")

# ========= Bot =========
bot = Bot(token=TG_TOKEN, parse_mode="HTML")
dp  = Dispatcher(bot)

# ========= –õ–æ–∫–∞–ª—å–Ω—ã–π ¬´–±—É–º–∞–∂–Ω—ã–π¬ª —É—á—ë—Ç –ø–æ–∑–∏—Ü–∏–π =========
# –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥:
# /hold add SOL 10 @ 55
# /hold rm  SOL 3
# /hold report
HOLD = {}  # {"SOLUSDT": {"qty": 10.0, "avg": 55.0}}

# ========= Helpers =========
def ensure(m: types.Message) -> bool:
    return (ALLOWED_ID == 0) or (m.from_user.id == ALLOWED_ID)

def http_get(url, params=None, timeout=10):
    try:
        return requests.get(url, params=params, timeout=timeout, headers={"User-Agent":"Mozilla/5.0"})
    except Exception:
        return None

def binance_price(symbol: str):
    r = http_get("https://api.binance.com/api/v3/ticker/price", {"symbol": symbol})
    if r and r.status_code == 200:
        try: return float(r.json()["price"])
        except: return None
    return None

def binance_24h(symbol: str):
    r = http_get("https://api.binance.com/api/v3/ticker/24hr", {"symbol": symbol})
    if r and r.status_code == 200:
        try: return float(r.json().get("priceChangePercent", 0.0))
        except: return 0.0
    return 0.0

def fmt_pct(x):
    try: return f"{x:+.1f}%"
    except: return "+0%"

# ========= –ù–æ–≤–æ—Å—Ç–∏ (–∫–æ—Ä–æ—Ç–∫–æ) =========
FEEDS = [
    "https://www.coindesk.com/arc/outboundfeeds/rss/",
    "https://www.investing.com/rss/market_overview.rss",
]
def fetch_news(limit=4):
    import re
    items=[]
    for u in FEEDS:
        r=http_get(u, timeout=12)
        if not r or r.status_code!=200: continue
        titles=re.findall(r"<title>(.*?)</title>", r.text, re.I|re.S)
        for t in titles[1:12]:
            t=re.sub("<.*?>","",t).strip()
            if t and t not in items:
                items.append(t)
            if len(items)>=limit: break
        if len(items)>=limit: break
    return items

# ========= –ö–æ–º–∞–Ω–¥—ã =========
@dp.message_handler(commands=["start","help"])
async def cmd_start(m: types.Message):
    if not ensure(m): return await m.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await m.answer(
        "ü§ñ –Ø –≥–æ—Ç–æ–≤.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /status ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞\n"
        "‚Ä¢ /advice ‚Äî —Å–æ–≤–µ—Ç –ø–æ —Ç–µ–∫—É—â–∏–º –ø–æ–∑–∏—Ü–∏—è–º\n"
        "‚Ä¢ /hold add SOL 10 @ 55 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
        "‚Ä¢ /hold rm SOL 3 ‚Äî —Å–ø–∏—Å–∞—Ç—å (–ø—Ä–æ–¥–∞–∂–∞)\n"
        "‚Ä¢ /hold report ‚Äî –æ—Ç—á—ë—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é\n"
        "‚Ä¢ /news ‚Äî –∫—Ä–∞—Ç–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        f"\nPAPER_MODE={'ON' if PAPER_MODE else 'OFF'} ‚Ä¢ TZ={TZ}\n"
        f"–î–∞–π–¥–∂–µ—Å—Ç—ã: {', '.join(NEWS_TIMES)}"
    )

@dp.message_handler(commands=["status"])
async def cmd_status(m: types.Message):
    if not ensure(m): return
    await m.answer(
        "üõ†Ô∏è <b>–°—Ç–∞—Ç—É—Å</b>\n"
        f"Watchlist: {', '.join(WATCHLIST)}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {SCAN_INTERVAL//60} –º–∏–Ω\n"
        f"–¶–µ–ª–∏: TP1={TP1_PCT:.1f}%  TP2={TP2_PCT:.1f}%  SL={-SL_PCT:.1f}%\n"
        f"PAPER_MODE: {'ON' if PAPER_MODE else 'OFF'}"
    )

@dp.message_handler(commands=["news"])
async def cmd_news(m: types.Message):
    if not ensure(m): return
    items = fetch_news(4)
    if not items: return await m.answer("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    await m.answer("üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏</b>\n" + "\n".join([f"‚Ä¢ {t}" for t in items]))

# ========= –£—á—ë—Ç /hold =========
POS_RE = re.compile(r"^/hold\s+(add|rm)\s+([A-Za-z]{2,10})\s+(\d+(?:\.\d+)?)\s*(?:@\s*(\d+(?:\.\d+)?))?$")

@dp.message_handler(commands=["hold"])
async def cmd_hold(m: types.Message):
    if not ensure(m): return
    t = m.text.strip()
    if t == "/hold" or t.endswith("report"):
        return await m.answer("üìí <b>–ü–æ—Ä—Ç—Ñ–µ–ª—å</b>\n" + build_portfolio_report())

    mt = POS_RE.match(t)
    if not mt:
        return await m.answer("–§–æ—Ä–º–∞—Ç:\n/hold add SOL 10 @ 55\n/hold rm SOL 3\n/hold report")

    action, sym, qty, px = mt.groups()
    sym = sym.upper(); 
    if not sym.endswith("USDT"): sym += "USDT"
    qty = float(qty)

    if action.lower()=="add":
        price = float(px) if px else (binance_price(sym) or 0.0)
        pos = HOLD.setdefault(sym, {"qty":0.0, "avg":0.0})
        new_qty = pos["qty"] + qty
        pos["avg"] = (pos["avg"]*pos["qty"] + price*qty)/new_qty if new_qty>0 else 0.0
        pos["qty"] = new_qty
        return await m.answer(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{sym}</b> {qty} @ {price}\n–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {pos}")

    # rm
    pos = HOLD.get(sym)
    if not pos or pos["qty"]<=0:
        return await m.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    sell_qty = min(qty, pos["qty"])
    pos["qty"] -= sell_qty
    if pos["qty"]<=0: HOLD.pop(sym, None)
    return await m.answer(f"‚ûñ –°–ø–∏—Å–∞–Ω–æ: <b>{sym}</b> {sell_qty}\n–û—Å—Ç–∞—Ç–æ–∫: {pos['qty'] if sym in HOLD else 0.0}")

def build_portfolio_report():
    if not HOLD:
        return "–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç. –ü—Ä–∏–º–µ—Ä: /hold add SOL 10 @ 55"
    lines=[]; total=0.0
    for sym, pos in HOLD.items():
        px = binance_price(sym) or 0.0
        pnl = (px/pos["avg"]-1)*100 if pos["avg"]>0 else 0.0
        val = px*pos["qty"]; total+=val
        lines.append(f"‚Ä¢ {sym}: {pos['qty']:.4f} @ {pos['avg']:.4f} ‚Üí {px:.4f} ({fmt_pct(pnl)}) ‚âà <b>{val:.2f} USDT</b>")
    lines.append(f"\n–ò—Ç–æ–≥–æ ‚âà <b>{total:.2f} USDT</b>")
    return "\n".join(lines)

# ========= –°–æ–≤–µ—Ç—ã –ø–æ —Ç–µ–∫—É—â–∏–º –ø–æ–∑–∏—Ü–∏—è–º =========
def build_advice_text():
    if not HOLD:
        return "–ü–æ–∫–∞ –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç. –î–æ–±–∞–≤—å: /hold add SOL 10 @ 55"
    lines = ["üí° <b>–°–æ–≤–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é</b>"]
    for sym, pos in HOLD.items():
        px = binance_price(sym)
        if px is None:
            lines.append(f"‚Ä¢ {sym}: —Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"); continue
        change = (px/pos["avg"]-1)*100 if pos["avg"]>0 else 0.0
        if change >= TP2_PCT:
            lines.append(f"‚Ä¢ {sym}: {px:.4f} ‚Äî ‚úÖ TP2: –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π 80% (–ø—Ä–∏–±—ã–ª—å {change:.1f}%). ‚ÑπÔ∏è –°–∏–ª—å–Ω—ã–π –∏–º–ø—É–ª—å—Å ‚Äî —Å–Ω–∏–∂–∞–µ–º —Ä–∏—Å–∫.")
        elif change >= TP1_PCT:
            lines.append(f"‚Ä¢ {sym}: {px:.4f} ‚Äî ‚úÖ TP1: –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π 50% (–ø—Ä–∏–±—ã–ª—å {change:.1f}%). ‚ÑπÔ∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–µ—Ä–≤–∞—è —Ü–µ–ª—å.")
        elif change <= -SL_PCT:
            lines.append(f"‚Ä¢ {sym}: {px:.4f} ‚Äî üõë SL: –∑–∞–∫—Ä–æ–π –ø–æ–∑–∏—Ü–∏—é (—É–±—ã—Ç–æ–∫ {change:.1f}%). ‚ÑπÔ∏è –ó–∞—â–∏—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞.")
        else:
            lines.append(f"‚Ä¢ {sym}: {px:.4f} ‚Äî ‚è≥ –î–µ—Ä–∂–∞—Ç—å. Œî={change:.1f}%. ‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ —Ñ–∏–∫—Å–∞—Ü–∏—é –Ω–µ—Ç.")
    return "\n".join(lines)

@dp.message_handler(commands=["advice"])
async def cmd_advice(m: types.Message):
    if not ensure(m): return
    await m.answer(build_advice_text())

# ========= –ö–Ω–æ–ø–∫–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø–æ —Å–∏–≥–Ω–∞–ª—É —Å–∫–∞–Ω–µ—Ä–∞ =========
@dp.callback_query_handler(lambda c: c.data.startswith("fix|"))
async def on_fix(c: types.CallbackQuery):
    if ALLOWED_ID and c.from_user.id != ALLOWED_ID:
        return await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    _, sym, frac = c.data.split("|")
    frac = float(frac)
    pos = HOLD.get(sym)
    if not pos or pos["qty"]<=0:
        return await c.message.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    sell_qty = round(pos["qty"]*frac, 6)
    pos["qty"] -= sell_qty
    if pos["qty"]<=0: HOLD.pop(sym, None)
    await c.message.edit_reply_markup()
    await c.message.answer(f"üí∞ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {sym} {sell_qty}\n–û—Å—Ç–∞—Ç–æ–∫: {pos.get('qty', 0.0)}")

# ========= –§–æ–Ω: —Å–∫–∞–Ω–µ—Ä (TP1/TP2/SL) –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥ =========
async def scanner_loop():
    last_state = {}  # sym -> {'state':'TP1/TP2/SL/HOLD', 'ts': ...}
    while True:
        try:
            for sym, pos in list(HOLD.items()):
                if pos["qty"]<=0 or pos["avg"]<=0: continue
                px = binance_price(sym); 
                if px is None: continue
                change = (px/pos["avg"]-1)*100
                state="HOLD"; text=None; kb=None
                if change >= TP2_PCT:
                    state="TP2"
                    text = f"üéØ {sym}: {px:.4f}. –î–æ—Å—Ç–∏–≥–Ω—É—Ç TP2 {TP2_PCT:.1f}% ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π 80%."
                    kb = InlineKeyboardMarkup().add(
                        InlineKeyboardButton("‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å 80%", callback_data=f"fix|{sym}|0.8"))
                elif change >= TP1_PCT:
                    state="TP1"
                    text = f"üéØ {sym}: {px:.4f}. –î–æ—Å—Ç–∏–≥–Ω—É—Ç TP1 {TP1_PCT:.1f}% ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π 50%."
                    kb = InlineKeyboardMarkup().add(
                        InlineKeyboardButton("‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å 50%", callback_data=f"fix|{sym}|0.5"))
                elif change <= -SL_PCT:
                    state="SL"
                    text = f"üõë {sym}: {px:.4f}. –°—Ç–æ–ø {SL_PCT:.1f}% ‚Äî –ø—Ä–æ–¥–∞–π –≤—Å—ë –¥–ª—è –∑–∞—â–∏—Ç—ã."
                    kb = InlineKeyboardMarkup().add(
                        InlineKeyboardButton("‚ùó –ü—Ä–æ–¥–∞—Ç—å –≤—Å—ë", callback_data=f"fix|{sym}|1.0"))
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                prev = last_state.get(sym, {}).get("state")
                if text and state != prev and ALLOWED_ID:
                    try:
                        await bot.send_message(ALLOWED_ID, text, reply_markup=kb)
                    except Exception:
                        pass
                    last_state[sym] = {"state": state, "ts": time.time()}
            await asyncio.sleep(max(15, SCAN_INTERVAL))
        except Exception:
            await asyncio.sleep(max(15, SCAN_INTERVAL))

# ========= –§–æ–Ω: –∞–≤—Ç–æ–¥–∞–π–¥–∂–µ—Å—Ç—ã –≤ –∑–∞–¥–∞–Ω–Ω—ã–µ —á–∞—Å—ã =========
async def daily_brief_loop():
    sent_today = set()  # "HH:MM"
    current_date = datetime.now().date()
    while True:
        try:
            now = datetime.now()
            if now.date() != current_date:
                sent_today.clear()
                current_date = now.date()
            hhmm = now.strftime("%H:%M")
            if ALLOWED_ID and hhmm in NEWS_TIMES and hhmm not in sent_today:
                btc = binance_price("BTCUSDT"); eth = binance_price("ETHUSDT")
                lines = [
                    f"üóìÔ∏è –î–∞–π–¥–∂–µ—Å—Ç {now.strftime('%d.%m %H:%M')} ({TZ})",
                    f"üìä BTC: <code>{btc}</code> ‚Ä¢ ETH: <code>{eth}</code>",
                    "üì∞ –ù–æ–≤–æ—Å—Ç–∏:",
                ]
                news = fetch_news(3)
                lines += [f"‚Ä¢ {t}" for t in news] if news else ["‚Ä¢ (–Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)"]
                lines.append("")
                lines.append(build_advice_text())
                lines.append("\n‚û°Ô∏è –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞: /advice")
                try:
                    await bot.send_message(ALLOWED_ID, "\n".join(lines))
                except Exception:
                    pass
                sent_today.add(hhmm)
            await asyncio.sleep(20)
        except Exception:
            await asyncio.sleep(20)

# ========= –ó–∞–ø—É—Å–∫ =========
async def on_startup(_):
    # –∑–∞–ø—É—Å–∫–∞–µ–º 2 —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(scanner_loop())
    asyncio.create_task(daily_brief_loop())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

import os, time, hmac, hashlib, asyncio, re, requests
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# ========= ENV =========
TG_TOKEN = (os.getenv("TELEGRAM_TOKEN") or os.getenv("TG_TOKEN") or "").strip()
ALLOWED_ID = int(os.getenv("ALLOWED_USER_ID", "0"))
PAPER = os.getenv("PAPER_MODE", "true").lower() == "true"

# –°–∫–∞–Ω–µ—Ä
WATCHLIST = [s.strip().upper() for s in os.getenv(
    "WATCHLIST",
    "BTCUSDT,ETHUSDT,SOLUSDT,BNBUSDT,AVAXUSDT,INJUSDT,OPUSDT,NEARUSDT,LINKUSDT,MATICUSDT,SEIUSDT"
).split(",") if s.strip()]
SCAN_INTERVAL = int(os.getenv("SCAN_INTERVAL", "300"))   # —Å–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä 300 = 5 –º–∏–Ω)
TP1_PCT = float(os.getenv("TP1_PCT", "3.0"))             # +% –∫ —Ü–µ–Ω–µ –ø–æ–∫—É–ø–∫–∏
TP2_PCT = float(os.getenv("TP2_PCT", "6.0"))             # +%
SL_PCT  = float(os.getenv("SL_PCT",  "2.0"))             # -%

# ====== –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ ¬´–ø—Å–µ–≤–¥–æ-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ¬ª (—Ä—É—á–Ω–æ–π —É—á—ë—Ç) ======
# /hold add SOL 10 @ 55   ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
# /hold rm  SOL 3         ‚Äî —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª-–≤–æ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å)
# /hold report            ‚Äî –æ—Ç—á—ë—Ç
HOLD = {}  # {"SOLUSDT": {"qty": 10.0, "avg": 55.0}}

# ========= Checks =========
if not TG_TOKEN or ":" not in TG_TOKEN:
    raise RuntimeError(f"Bad TELEGRAM_TOKEN: len={len(TG_TOKEN)}")

bot = Bot(token=TG_TOKEN, parse_mode="HTML")
dp  = Dispatcher(bot)

# ========= Helpers =========
def ensure(m: types.Message) -> bool:
    return ALLOWED_ID == 0 or m.from_user.id == ALLOWED_ID

def binance_price(symbol: str):
    try:
        r = requests.get(f"https://api.binance.com/api/v3/ticker/price",
                         params={"symbol": symbol}, timeout=10)
        if r.status_code == 200:
            return float(r.json()["price"])
    except Exception:
        pass
    return None

def fmt_pct(x): 
    s = f"{x:.1f}%"
    return s.replace(".0%","%")

def short_reason(side:str):
    return "–æ–±—ä—ë–º —Ä–∞—Å—Ç—ë—Ç, –ø—Ä–æ–±–æ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è" if side=="BUY" else "—Å–ª–∞–±—ã–π –∏–º–ø—É–ª—å—Å/—Ä–∏—Å–∫–∏ —Å–Ω–∏–∂–µ–Ω–∏—è"

# ====== –ö–æ–º–∞–Ω–¥—ã ======
@dp.message_handler(commands=["start","help"])
async def start(m: types.Message):
    if not ensure(m): return
    text = (
        "ü§ñ –Ø –≥–æ—Ç–æ–≤.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /status ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞ üîß\n"
        "‚Ä¢ /advice ‚Äî –±—ã—Å—Ç—Ä—ã–π —Å–æ–≤–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é üí°\n"
        "‚Ä¢ /hold add SOL 10 @ 55 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é\n"
        "‚Ä¢ /hold rm SOL 3 ‚Äî —Å–ø–∏—Å–∞—Ç—å (–ø—Ä–æ–¥–∞–∂–∞)\n"
        "‚Ä¢ /hold report ‚Äî –æ—Ç—á—ë—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é\n"
        "‚Ä¢ /news ‚Äî –Ω–æ–≤–æ—Å—Ç–∏ (–∫—Ä–∞—Ç–∫–æ)\n\n"
        f"PAPER_MODE={'ON' if PAPER else 'OFF'}"
    )
    await m.answer(text)

@dp.message_handler(commands=["status"])
async def status(m: types.Message):
    if not ensure(m): return
    wl = ",".join(WATCHLIST)
    text = (
        "üõ†Ô∏è <b>–°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞</b>\n"
        f"Watchlist: {wl}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {SCAN_INTERVAL//60} –º–∏–Ω\n"
        f"–¶–µ–ª–∏: TP1={fmt_pct(TP1_PCT)}, TP2={fmt_pct(TP2_PCT)}, SL=-{fmt_pct(SL_PCT)}"
    )
    await m.answer(text)

# ---- –ü—Å–µ–≤–¥–æ‚Äë–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ ----
POS_RE = re.compile(r"^/hold\s+(add|rm)\s+([A-Za-z]{2,10})\s+(\d+(?:\.\d+)?)\s*(?:@\s*(\d+(?:\.\d+)?))?$")

@dp.message_handler(commands=["hold"])
async def hold_cmd(m: types.Message):
    if not ensure(m): return
    t = m.text.strip()
    if t == "/hold" or t.endswith("report"):
        return await hold_report(m)

    mt = POS_RE.match(t)
    if not mt:
        return await m.answer("–§–æ—Ä–º–∞—Ç:\n/hold add SOL 10 @ 55\n/hold rm SOL 3\n/hold report")
    action, sym, qty, px = mt.groups()
    sym = sym.upper()
    if not sym.endswith("USDT"): sym += "USDT"
    qty = float(qty)
    if action == "add":
        if not px:
            live = binance_price(sym)
            if live is None: return await m.answer("–ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É.")
            px = live
        else:
            px = float(px)
        pos = HOLD.setdefault(sym, {"qty":0.0, "avg":0.0})
        new_qty = pos["qty"] + qty
        pos["avg"] = (pos["avg"]*pos["qty"] + px*qty)/new_qty if new_qty>0 else 0.0
        pos["qty"] = new_qty
        await m.answer(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{sym}</b> {qty} @ {px}\n–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {pos}")
    else:
        pos = HOLD.get(sym)
        if not pos or pos["qty"]<=0:
            return await m.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        sell_qty = min(qty, pos["qty"])
        pos["qty"] -= sell_qty
        await m.answer(f"‚ûñ –°–ø–∏—Å–∞–Ω–æ: <b>{sym}</b> {sell_qty}\n–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {pos}")

@dp.message_handler(commands=["advice"])
async def advice(m: types.Message):
    if not ensure(m): return
    if not HOLD:
        return await m.answer("–ü–æ–∫–∞ –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç. –î–æ–±–∞–≤—å: /hold add SOL 10 @ 55")
    lines = ["üí° <b>–°–æ–≤–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é</b>"]
    for sym, pos in HOLD.items():
        live = binance_price(sym)
        if live is None: 
            lines.append(f"‚Ä¢ {sym}: —Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            continue
        change = (live/pos["avg"]-1)*100 if pos["avg"]>0 else 0
        if change >= TP2_PCT:
            lines.append(f"‚Ä¢ {sym}: {live:.4f} ‚Äî ‚úÖ TP2: –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π 80% (–ø—Ä–∏–±—ã–ª—å {change:.1f}%). –ü—Ä–∏—á–∏–Ω–∞: —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥, {short_reason('SELL')}.")
        elif change >= TP1_PCT:
            lines.append(f"‚Ä¢ {sym}: {live:.4f} ‚Äî ‚úÖ TP1: –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π 50% (–ø—Ä–∏–±—ã–ª—å {change:.1f}%). –ü—Ä–∏—á–∏–Ω–∞: –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Ü–µ–ª–∏.")
        elif change <= -SL_PCT:
            lines.append(f"‚Ä¢ {sym}: {live:.4f} ‚Äî üõë SL: –ø—Ä–æ–¥–∞–π –≤—Å—ë (—É–±—ã—Ç–æ–∫ {change:.1f}%). –ü—Ä–∏—á–∏–Ω–∞: –∑–∞—â–∏—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞.")
        else:
            lines.append(f"‚Ä¢ {sym}: {live:.4f} ‚Äî ‚è≥ –î–µ—Ä–∂–∞—Ç—å. Œî={change:.1f}%")

    await m.answer("\n".join(lines))

@dp.message_handler(commands=["news"])
async def news(m: types.Message):
    if not ensure(m): return
    try:
        r = requests.get("https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT", timeout=8)
        btc = float(r.json().get("price", 0))
        r2 = requests.get("https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT", timeout=8)
        eth = float(r2.json().get("price", 0))
        await m.answer(f"üì∞ <b>–ö–æ—Ä–æ—Ç–∫–æ</b>\nBTC: <code>{btc}</code>\nETH: <code>{eth}</code>")
    except Exception:
        await m.answer("–ù–æ–≤–æ—Å—Ç–∏/—Ü–µ–Ω—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

# ========= –ê–≤—Ç–æ—Å–∫–∞–Ω–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ =========
async def scanner_loop():
    await bot.wait_until_ready() if hasattr(bot, "wait_until_ready") else asyncio.sleep(0)
    # –•—Ä–∞–Ω–∏–º ¬´–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–≤–µ—Ç¬ª —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
    last_state = {}  # sym -> state: 'TP2','TP1','SL','HOLD'
    while True:
        try:
            for sym in WATCHLIST:
                live = binance_price(sym)
                if live is None: continue
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è ‚Äî —Å–æ–≤–µ—Ç –ø–æ –Ω–µ–π; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–±–æ—è
                pos = HOLD.get(sym)
                state = "HOLD"
                explain = ""
                kb=None
                if pos and pos["qty"]>0 and pos["avg"]>0:
                    change = (live/pos["avg"]-1)*100
                    if change >= TP2_PCT:
                        state="TP2"; explain=f"üéØ {sym}: —Ü–µ–Ω–∞ {live:.4f}. TP2 {fmt_pct(TP2_PCT)} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π 80%. –ü—Ä–∏—á–∏–Ω–∞: —Å–∏–ª—å–Ω—ã–π –∏–º–ø—É–ª—å—Å."
                        kb = InlineKeyboardMarkup().add(
                            InlineKeyboardButton("‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å 80%", callback_data=f"fix|{sym}|0.8"))
                    elif change >= TP1_PCT:
                        state="TP1"; explain=f"üéØ {sym}: —Ü–µ–Ω–∞ {live:.4f}. TP1 {fmt_pct(TP1_PCT)} ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π 50%."
                        kb = InlineKeyboardMarkup().add(
                            InlineKeyboardButton("‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å 50%", callback_data=f"fix|{sym}|0.5"))
                    elif change <= -SL_PCT:
                        state="SL"; explain=f"üõë {sym}: —Ü–µ–Ω–∞ {live:.4f}. –°—Ç–æ–ø {fmt_pct(SL_PCT)} ‚Äî –ø—Ä–æ–¥–∞–π –≤—Å—ë –¥–ª—è –∑–∞—â–∏—Ç—ã."
                        kb = InlineKeyboardMarkup().add(
                            InlineKeyboardButton("‚ùó –ü—Ä–æ–¥–∞—Ç—å –≤—Å—ë", callback_data=f"fix|{sym}|1.0"))
                    else:
                        state="HOLD"

                # —à–ª—ë–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if state != last_state.get(sym) and state != "HOLD" and ALLOWED_ID:
                    try:
                        await bot.send_message(ALLOWED_ID, explain, reply_markup=kb)
                    except Exception:
                        pass
                    last_state[sym]=state
            await asyncio.sleep(SCAN_INTERVAL)
        except Exception:
            await asyncio.sleep(SCAN_INTERVAL)

@dp.callback_query_handler(lambda c: c.data.startswith("fix|"))
async def on_fix(c: types.CallbackQuery):
    if ALLOWED_ID and c.from_user.id != ALLOWED_ID:
        return await c.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    _, sym, frac = c.data.split("|")
    frac = float(frac)
    pos = HOLD.get(sym)
    if not pos or pos["qty"]<=0:
        return await c.message.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    sell_qty = round(pos["qty"]*frac, 6)
    pos["qty"] -= sell_qty
    await c.message.edit_reply_markup()
    await c.message.answer(f"üí∞ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {sym} {sell_qty}\n–û—Å—Ç–∞—Ç–æ–∫: {pos['qty']}")

async def on_startup(_):
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä
    asyncio.create_task(scanner_loop())

# ====== Entry ======
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
